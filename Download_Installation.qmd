---
title: "Download & Installation"
author: "Cox Lab"
execute:
  eval: false
format:
  html:
    toc: true
    toc-depth: 4
    toc-expand: false
    number-sections: true
    number-depth: 4
editor: source
date: today
bibliography: references.bib
csl: nature.csl
---

# Download

Downloading and using the software is free of charge.  
Simply download from [MaxQuant.org](https://maxquant.org/) and unpack the compressed file `MaxQuant.zip`.

# Running

Choose your operating system to see how to run MaxQuant.

**Supported Operating Systems (64-bit):**  

- Windows 10  
- Windows 11  
- Windows Server 2016â€“2025
- Ubuntu 20.04 or newer

## MaxQuant on Windows {#sec-mq-windows}

**Install .NET Desktop Runtime 8.0**

Check if it's already installed (Win+R -\> `cmd`):

```bash
dotnet --list-runtimes
```

If you need to install or update .NET, follow the instructions provided by [Microsoft for .NET 8.0](https://dotnet.microsoft.com/en-us/download/dotnet/8.0).

MaxQuant requires .NET >= 8.0.302.

**Running MaxQuant**  

- **GUI Mode:** Double-click `MaxQuant.exe` inside the `MaxQuant` folder. Specify your RAW files, experimental design, and FASTA files.  
- **Start Analysis:** Click the `Start` button.

## MaxQuant on Linux

MaxQuant is supported on Ubuntu 20.04 or newer, but it should also work on other distributions. Currently, MaxQuant on Linux does **not** have a GUI; only command-line usage is supported. A GUI may be offered in future releases. [Subscribe to our newsletter](https://maxquant.org/newsletter/) for updates.

This tutorial focuses on command-line usage.

**Install .NET Runtime 8.0**

Check if .NET 8.0 is installed:

```bash
dotnet --list-runtimes
```

If you see version `8.0.302` or newer, you're all set. Otherwise, follow the [official .NET installation instructions](https://learn.microsoft.com/en-us/dotnet/core/install/linux?WT.mc_id=dotnet-35129-website) for your distribution.

### Global Installation on Ubuntu (with `sudo` privileges)

For example, on Ubuntu 22.04:

```bash
sudo apt-get update && \
sudo apt-get install -y dotnet-runtime-8.0
```

### Local Installation using `conda` (No `sudo` required)

If you lack `sudo` privileges, you can install .NET via `conda` [@anaconda].

1. **Download and Install Conda:**
   ```bash
   # Get the installer
   mkdir -p ~/miniconda3
   wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-$(arch).sh -O ~/miniconda3/miniconda.sh

   # Install Conda
   bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
   rm ~/miniconda3/miniconda.sh
   ```

2. **Initialize Conda in Your Shell:**
   ```bash
   ~/miniconda3/bin/conda init bash
   source ~/.bashrc
   ```

3. **Create a Conda Environment with .NET:**
   ```bash
   conda create -y -n dotnet8 conda-forge::dotnet-runtime=8
   conda activate dotnet8
   ```

### Scripted Installation Using Microsoft Resources

You can also install .NET using the official Microsoft `dotnet-install` script:

```bash
wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
chmod +x ./dotnet-install.sh
./dotnet-install.sh --channel 8.0 --runtime dotnet
```

**Important options:**

- `--channel`: Specify a .NET channel or version (e.g., `8.0`).
- `--version`: Install a specific version.
- `--install-dir`: Specify the installation directory.

We also provide a helper script [Install_dotnet.sh](Install_dotnet.sh) for automated installation of .NET 8.0.302. This version was chosen due to a bug in Perseus requiring that version.

After downloading `Install_dotnet.sh`, make it executable and run it:

```bash
chmod +x Install_dotnet.sh
sh Install_dotnet.sh INSTALLATION_PATH/
```

This will install .NET at the specified path without requiring `sudo` privileges.

## Editing the `mqpar.xml` File

We recommend pre-configuring the `mqpar.xml` file using the MaxQuant GUI on Windows. After transferring it to a Linux machine, update the file paths accordingly. You can also update paths programmatically.

- **If using on-the-fly prediction:**
  ```bash
  dotnet MaxQuant/bin/MaxQuantCmd.dll old_mqpar.xml --changeFolder new_mqpar.xml <new_fasta_folder> <new_raw_folder>
  ```

- **If using predicted libraries:**
  ```bash
  dotnet MaxQuant/bin/MaxQuantCmd.dll old_mqpar.xml --changeFolder new_mqpar.xml <new_fasta_folder> <new_raw_folder> <new_library_folder>
  ```

If you are familiar with `mqpar.xml` structure, you can create and edit a template directly:
```bash
dotnet MaxQuant/bin/MaxQuantCmd.dll --create new_mqpar.xml
```

## Running MaxQuant

Once everything is set up:
```bash
dotnet MaxQuant/bin/MaxQuantCmd.dll mqpar.xml
```

# Hardware Requirements

### Minimum Entry-Level Configuration
- x86_64 CPU
- At least 8 GB of RAM
- Add 4 GB of RAM for each additional MaxQuant processing thread

### Recommended Standard Configuration
- Modern Intel Core or AMD Ryzen CPU
- 64 GB RAM
- 2 TB NVMe SSD (or larger)

## Real-World Examples

### Single-User Workstation
- CPU: AMD Ryzen 9 9950X (16 cores)
- Memory: 96 GB DDR5-6000 (2x 48 GB)
- Storage: WD_BLACK SN850X NVMe SSD 4TB

### Small Multi-User Server
- CPU: AMD Epyc 9334 (32 cores)
- Memory: 384 GB DDR5-4800 (12x 32 GB)
- OS/Software Storage: Samsung PM9A3 NVMe SSD 1.92 TB (2x in HW-RAID1)
- Temporary Data Storage: Solidigm D5-P5336 NVMe SSD 15.36TB (2x in SW-RAID1)

---

If you have questions or encounter problems with the installation, please [contact us](contact.html).